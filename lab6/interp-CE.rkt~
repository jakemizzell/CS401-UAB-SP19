#lang racket


(provide interp-CE)


; Define interp-CE, a direct recursive (big-step) interpreter for the language:
;;;  e ::= (lambda (x) e)
;;;      | (e e)
;;;      | x
;;;      | (if b e e)
;;;      | (and e e)
;;;      | (or e e)
;;;      | (not e)
;;;      | b
;;;  x ::= < any variable satisfying symbol? >
;;;  b ::= #t | #f

; (A subset of Scheme/Racket that should be interpreted as Scheme/Racket.)
; You can use (error ...) to handle errors, but will only be tested on
; on correct inputs. And/Or must properly short-circuit as in Scheme.
; Boolean-returning programs should yield a boolean. Closure-returning
; programs should yield a representation of an explicit closure:
; `(closure (lambda (,x) ,body) ,env) that pairs a syntactic lambda with an
; environment encoded as an immutable hash. You may want to use (hash),
; (hash-ref ...), (hash-set ...), (hash-has-key? ...), etc.

; For example:
;;; (interp-CE `((lambda (x) x) (lambda (y) y)) (hash))
; should yield a value equal? to:
;;; `(closure (lambda (y) y) ,(hash)) 

(define (interp-CE cexp env)
  (match cexp
         [`(not ,e0)
          (if (interp-CE e0 env)
              #f
              #t)]
         [(? boolean? b) b]
         [`(lambda (,x) ,body)
          `(closure ,cexp ,env)]
         [`(,fun ,arg)
          (match (interp-CE fun env)
                 [`(closure (lambda (,fx) ,fbody) ,fenv)
                  (interp-CE fbody (hash-set fenv fx (interp-CE arg env)))])]
         [(? symbol? x)
          (hash-ref env x
            (lambda () (error (format "Unbound variable: ~a" x))))]
         [`(if ,guard ,then ,else)
          (if (interp-CE guard env)
              (interp-CE then env)
              (interp-CE else env))]
         [`(and ,e0 ,e1)
          (if (interp-CE e0 env)
              (interp-CE e1 env)
              #f)]
         [`(or ,e0 ,e1)
          (if (interp-CE e0 env)
              #t
              (interp-CE e1 env))]
         [else (error (format "Exp not recognized: ~a" cexp))]))




